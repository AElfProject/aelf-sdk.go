// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.11.4
// source: election_contract.proto

package client

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//election_contract
type CandidateInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Candidate’s public key.
	Pubkey string `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	// The number of terms that the candidate is elected.
	Terms []int64 `protobuf:"varint,2,rep,packed,name=terms,proto3" json:"terms,omitempty"`
	// The number of blocks the candidate has produced.
	ProducedBlocks int64 `protobuf:"varint,3,opt,name=produced_blocks,json=producedBlocks,proto3" json:"produced_blocks,omitempty"`
	// The time slot for which the candidate failed to produce blocks.
	MissedTimeSlots int64 `protobuf:"varint,4,opt,name=missed_time_slots,json=missedTimeSlots,proto3" json:"missed_time_slots,omitempty"`
	// The count of continual appointment.
	ContinualAppointmentCount int64 `protobuf:"varint,5,opt,name=continual_appointment_count,json=continualAppointmentCount,proto3" json:"continual_appointment_count,omitempty"`
	// The transaction id when the candidate announced.
	AnnouncementTransactionId *Hash `protobuf:"bytes,6,opt,name=announcement_transaction_id,json=announcementTransactionId,proto3" json:"announcement_transaction_id,omitempty"`
	// Indicate whether the candidate can be elected in the current term.
	IsCurrentCandidate bool `protobuf:"varint,7,opt,name=is_current_candidate,json=isCurrentCandidate,proto3" json:"is_current_candidate,omitempty"`
}

func (x *CandidateInformation) Reset() {
	*x = CandidateInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_election_contract_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CandidateInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandidateInformation) ProtoMessage() {}

func (x *CandidateInformation) ProtoReflect() protoreflect.Message {
	mi := &file_election_contract_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandidateInformation.ProtoReflect.Descriptor instead.
func (*CandidateInformation) Descriptor() ([]byte, []int) {
	return file_election_contract_proto_rawDescGZIP(), []int{0}
}

func (x *CandidateInformation) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *CandidateInformation) GetTerms() []int64 {
	if x != nil {
		return x.Terms
	}
	return nil
}

func (x *CandidateInformation) GetProducedBlocks() int64 {
	if x != nil {
		return x.ProducedBlocks
	}
	return 0
}

func (x *CandidateInformation) GetMissedTimeSlots() int64 {
	if x != nil {
		return x.MissedTimeSlots
	}
	return 0
}

func (x *CandidateInformation) GetContinualAppointmentCount() int64 {
	if x != nil {
		return x.ContinualAppointmentCount
	}
	return 0
}

func (x *CandidateInformation) GetAnnouncementTransactionId() *Hash {
	if x != nil {
		return x.AnnouncementTransactionId
	}
	return nil
}

func (x *CandidateInformation) GetIsCurrentCandidate() bool {
	if x != nil {
		return x.IsCurrentCandidate
	}
	return false
}

type GetTermSnapshotInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The term number.
	TermNumber int64 `protobuf:"varint,1,opt,name=term_number,json=termNumber,proto3" json:"term_number,omitempty"`
}

func (x *GetTermSnapshotInput) Reset() {
	*x = GetTermSnapshotInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_election_contract_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTermSnapshotInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTermSnapshotInput) ProtoMessage() {}

func (x *GetTermSnapshotInput) ProtoReflect() protoreflect.Message {
	mi := &file_election_contract_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTermSnapshotInput.ProtoReflect.Descriptor instead.
func (*GetTermSnapshotInput) Descriptor() ([]byte, []int) {
	return file_election_contract_proto_rawDescGZIP(), []int{1}
}

func (x *GetTermSnapshotInput) GetTermNumber() int64 {
	if x != nil {
		return x.TermNumber
	}
	return 0
}

type TermSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The end round number of this term.
	EndRoundNumber int64 `protobuf:"varint,1,opt,name=end_round_number,json=endRoundNumber,proto3" json:"end_round_number,omitempty"`
	// The number of blocks mined in this term.
	MinedBlocks int64 `protobuf:"varint,2,opt,name=mined_blocks,json=minedBlocks,proto3" json:"mined_blocks,omitempty"`
	// The election result, candidates’ public key -> number of votes.
	ElectionResult map[string]int64 `protobuf:"bytes,3,rep,name=election_result,json=electionResult,proto3" json:"election_result,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *TermSnapshot) Reset() {
	*x = TermSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_election_contract_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TermSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermSnapshot) ProtoMessage() {}

func (x *TermSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_election_contract_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermSnapshot.ProtoReflect.Descriptor instead.
func (*TermSnapshot) Descriptor() ([]byte, []int) {
	return file_election_contract_proto_rawDescGZIP(), []int{2}
}

func (x *TermSnapshot) GetEndRoundNumber() int64 {
	if x != nil {
		return x.EndRoundNumber
	}
	return 0
}

func (x *TermSnapshot) GetMinedBlocks() int64 {
	if x != nil {
		return x.MinedBlocks
	}
	return 0
}

func (x *TermSnapshot) GetElectionResult() map[string]int64 {
	if x != nil {
		return x.ElectionResult
	}
	return nil
}

type GetElectionResultInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The term number.
	TermNumber int64 `protobuf:"varint,1,opt,name=term_number,json=termNumber,proto3" json:"term_number,omitempty"`
}

func (x *GetElectionResultInput) Reset() {
	*x = GetElectionResultInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_election_contract_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetElectionResultInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetElectionResultInput) ProtoMessage() {}

func (x *GetElectionResultInput) ProtoReflect() protoreflect.Message {
	mi := &file_election_contract_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetElectionResultInput.ProtoReflect.Descriptor instead.
func (*GetElectionResultInput) Descriptor() ([]byte, []int) {
	return file_election_contract_proto_rawDescGZIP(), []int{3}
}

func (x *GetElectionResultInput) GetTermNumber() int64 {
	if x != nil {
		return x.TermNumber
	}
	return 0
}

type ElectionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The term number
	TermNumber int64 `protobuf:"varint,1,opt,name=term_number,json=termNumber,proto3" json:"term_number,omitempty"`
	// The election result, candidates’ public key -> number of votes.
	Results map[string]int64 `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Whether an election is currently being held.
	IsActive bool `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (x *ElectionResult) Reset() {
	*x = ElectionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_election_contract_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionResult) ProtoMessage() {}

func (x *ElectionResult) ProtoReflect() protoreflect.Message {
	mi := &file_election_contract_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionResult.ProtoReflect.Descriptor instead.
func (*ElectionResult) Descriptor() ([]byte, []int) {
	return file_election_contract_proto_rawDescGZIP(), []int{4}
}

func (x *ElectionResult) GetTermNumber() int64 {
	if x != nil {
		return x.TermNumber
	}
	return 0
}

func (x *ElectionResult) GetResults() map[string]int64 {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ElectionResult) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type ElectorVote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The active voting record ids.
	ActiveVotingRecordIds []*Hash `protobuf:"bytes,1,rep,name=active_voting_record_ids,json=activeVotingRecordIds,proto3" json:"active_voting_record_ids,omitempty"`
	// The voting record ids that were withdrawn.
	WithdrawnVotingRecordIds []*Hash `protobuf:"bytes,2,rep,name=withdrawn_voting_record_ids,json=withdrawnVotingRecordIds,proto3" json:"withdrawn_voting_record_ids,omitempty"`
	// The total number of active votes.
	ActiveVotedVotesAmount int64 `protobuf:"varint,3,opt,name=active_voted_votes_amount,json=activeVotedVotesAmount,proto3" json:"active_voted_votes_amount,omitempty"`
	// The total number of votes (including the number of votes withdrawn).
	AllVotedVotesAmount int64 `protobuf:"varint,4,opt,name=all_voted_votes_amount,json=allVotedVotesAmount,proto3" json:"all_voted_votes_amount,omitempty"`
	// The active voting records.
	ActiveVotingRecords []*ElectionVotingRecord `protobuf:"bytes,5,rep,name=active_voting_records,json=activeVotingRecords,proto3" json:"active_voting_records,omitempty"`
	// The voting records that were withdrawn.
	WithdrawnVotesRecords []*ElectionVotingRecord `protobuf:"bytes,6,rep,name=withdrawn_votes_records,json=withdrawnVotesRecords,proto3" json:"withdrawn_votes_records,omitempty"`
	// Public key for voter.
	Pubkey []byte `protobuf:"bytes,7,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (x *ElectorVote) Reset() {
	*x = ElectorVote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_election_contract_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectorVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectorVote) ProtoMessage() {}

func (x *ElectorVote) ProtoReflect() protoreflect.Message {
	mi := &file_election_contract_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectorVote.ProtoReflect.Descriptor instead.
func (*ElectorVote) Descriptor() ([]byte, []int) {
	return file_election_contract_proto_rawDescGZIP(), []int{5}
}

func (x *ElectorVote) GetActiveVotingRecordIds() []*Hash {
	if x != nil {
		return x.ActiveVotingRecordIds
	}
	return nil
}

func (x *ElectorVote) GetWithdrawnVotingRecordIds() []*Hash {
	if x != nil {
		return x.WithdrawnVotingRecordIds
	}
	return nil
}

func (x *ElectorVote) GetActiveVotedVotesAmount() int64 {
	if x != nil {
		return x.ActiveVotedVotesAmount
	}
	return 0
}

func (x *ElectorVote) GetAllVotedVotesAmount() int64 {
	if x != nil {
		return x.AllVotedVotesAmount
	}
	return 0
}

func (x *ElectorVote) GetActiveVotingRecords() []*ElectionVotingRecord {
	if x != nil {
		return x.ActiveVotingRecords
	}
	return nil
}

func (x *ElectorVote) GetWithdrawnVotesRecords() []*ElectionVotingRecord {
	if x != nil {
		return x.WithdrawnVotesRecords
	}
	return nil
}

func (x *ElectorVote) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

type ElectionVotingRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address of voter.
	Voter *Address `protobuf:"bytes,1,opt,name=voter,proto3" json:"voter,omitempty"`
	// The public key of candidate.
	Candidate string `protobuf:"bytes,2,opt,name=candidate,proto3" json:"candidate,omitempty"`
	// Amount of voting.
	Amount int64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// The term number of voting.
	TermNumber int64 `protobuf:"varint,4,opt,name=term_number,json=termNumber,proto3" json:"term_number,omitempty"`
	// The vote id.
	VoteId *Hash `protobuf:"bytes,5,opt,name=vote_id,json=voteId,proto3" json:"vote_id,omitempty"`
	// Vote lock time.
	LockTime int64 `protobuf:"varint,6,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
	// The unlock timestamp.
	UnlockTimestamp *timestamp.Timestamp `protobuf:"bytes,7,opt,name=unlock_timestamp,json=unlockTimestamp,proto3" json:"unlock_timestamp,omitempty"`
	// The withdraw timestamp.
	WithdrawTimestamp *timestamp.Timestamp `protobuf:"bytes,8,opt,name=withdraw_timestamp,json=withdrawTimestamp,proto3" json:"withdraw_timestamp,omitempty"`
	// The vote timestamp.
	VoteTimestamp *timestamp.Timestamp `protobuf:"bytes,9,opt,name=vote_timestamp,json=voteTimestamp,proto3" json:"vote_timestamp,omitempty"`
	// Indicates if the vote has been withdrawn.
	IsWithdrawn bool `protobuf:"varint,10,opt,name=is_withdrawn,json=isWithdrawn,proto3" json:"is_withdrawn,omitempty"`
	// Vote weight for sharing bonus.
	Weight int64 `protobuf:"varint,11,opt,name=weight,proto3" json:"weight,omitempty"`
	// Whether vote others.
	IsChangeTarget bool `protobuf:"varint,12,opt,name=is_change_target,json=isChangeTarget,proto3" json:"is_change_target,omitempty"`
}

func (x *ElectionVotingRecord) Reset() {
	*x = ElectionVotingRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_election_contract_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionVotingRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionVotingRecord) ProtoMessage() {}

func (x *ElectionVotingRecord) ProtoReflect() protoreflect.Message {
	mi := &file_election_contract_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionVotingRecord.ProtoReflect.Descriptor instead.
func (*ElectionVotingRecord) Descriptor() ([]byte, []int) {
	return file_election_contract_proto_rawDescGZIP(), []int{6}
}

func (x *ElectionVotingRecord) GetVoter() *Address {
	if x != nil {
		return x.Voter
	}
	return nil
}

func (x *ElectionVotingRecord) GetCandidate() string {
	if x != nil {
		return x.Candidate
	}
	return ""
}

func (x *ElectionVotingRecord) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ElectionVotingRecord) GetTermNumber() int64 {
	if x != nil {
		return x.TermNumber
	}
	return 0
}

func (x *ElectionVotingRecord) GetVoteId() *Hash {
	if x != nil {
		return x.VoteId
	}
	return nil
}

func (x *ElectionVotingRecord) GetLockTime() int64 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

func (x *ElectionVotingRecord) GetUnlockTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.UnlockTimestamp
	}
	return nil
}

func (x *ElectionVotingRecord) GetWithdrawTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.WithdrawTimestamp
	}
	return nil
}

func (x *ElectionVotingRecord) GetVoteTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.VoteTimestamp
	}
	return nil
}

func (x *ElectionVotingRecord) GetIsWithdrawn() bool {
	if x != nil {
		return x.IsWithdrawn
	}
	return false
}

func (x *ElectionVotingRecord) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ElectionVotingRecord) GetIsChangeTarget() bool {
	if x != nil {
		return x.IsChangeTarget
	}
	return false
}

type CandidateVote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The active voting record ids obtained.
	ObtainedActiveVotingRecordIds []*Hash `protobuf:"bytes,1,rep,name=obtained_active_voting_record_ids,json=obtainedActiveVotingRecordIds,proto3" json:"obtained_active_voting_record_ids,omitempty"`
	// The active voting record ids that were withdrawn.
	ObtainedWithdrawnVotingRecordIds []*Hash `protobuf:"bytes,2,rep,name=obtained_withdrawn_voting_record_ids,json=obtainedWithdrawnVotingRecordIds,proto3" json:"obtained_withdrawn_voting_record_ids,omitempty"`
	// The total number of active votes obtained.
	ObtainedActiveVotedVotesAmount int64 `protobuf:"varint,3,opt,name=obtained_active_voted_votes_amount,json=obtainedActiveVotedVotesAmount,proto3" json:"obtained_active_voted_votes_amount,omitempty"`
	// The total number of votes obtained.
	AllObtainedVotedVotesAmount int64 `protobuf:"varint,4,opt,name=all_obtained_voted_votes_amount,json=allObtainedVotedVotesAmount,proto3" json:"all_obtained_voted_votes_amount,omitempty"`
	// The active voting records.
	ObtainedActiveVotingRecords []*ElectionVotingRecord `protobuf:"bytes,5,rep,name=obtained_active_voting_records,json=obtainedActiveVotingRecords,proto3" json:"obtained_active_voting_records,omitempty"`
	// The voting records that were withdrawn.
	ObtainedWithdrawnVotesRecords []*ElectionVotingRecord `protobuf:"bytes,6,rep,name=obtained_withdrawn_votes_records,json=obtainedWithdrawnVotesRecords,proto3" json:"obtained_withdrawn_votes_records,omitempty"`
	// Public key for candidate.
	Pubkey []byte `protobuf:"bytes,7,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (x *CandidateVote) Reset() {
	*x = CandidateVote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_election_contract_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CandidateVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandidateVote) ProtoMessage() {}

func (x *CandidateVote) ProtoReflect() protoreflect.Message {
	mi := &file_election_contract_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandidateVote.ProtoReflect.Descriptor instead.
func (*CandidateVote) Descriptor() ([]byte, []int) {
	return file_election_contract_proto_rawDescGZIP(), []int{7}
}

func (x *CandidateVote) GetObtainedActiveVotingRecordIds() []*Hash {
	if x != nil {
		return x.ObtainedActiveVotingRecordIds
	}
	return nil
}

func (x *CandidateVote) GetObtainedWithdrawnVotingRecordIds() []*Hash {
	if x != nil {
		return x.ObtainedWithdrawnVotingRecordIds
	}
	return nil
}

func (x *CandidateVote) GetObtainedActiveVotedVotesAmount() int64 {
	if x != nil {
		return x.ObtainedActiveVotedVotesAmount
	}
	return 0
}

func (x *CandidateVote) GetAllObtainedVotedVotesAmount() int64 {
	if x != nil {
		return x.AllObtainedVotedVotesAmount
	}
	return 0
}

func (x *CandidateVote) GetObtainedActiveVotingRecords() []*ElectionVotingRecord {
	if x != nil {
		return x.ObtainedActiveVotingRecords
	}
	return nil
}

func (x *CandidateVote) GetObtainedWithdrawnVotesRecords() []*ElectionVotingRecord {
	if x != nil {
		return x.ObtainedWithdrawnVotesRecords
	}
	return nil
}

func (x *CandidateVote) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

type GetWelfareRewardAmountSampleInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token lock time.
	Value []int64 `protobuf:"varint,1,rep,packed,name=value,proto3" json:"value,omitempty"`
}

func (x *GetWelfareRewardAmountSampleInput) Reset() {
	*x = GetWelfareRewardAmountSampleInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_election_contract_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWelfareRewardAmountSampleInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWelfareRewardAmountSampleInput) ProtoMessage() {}

func (x *GetWelfareRewardAmountSampleInput) ProtoReflect() protoreflect.Message {
	mi := &file_election_contract_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWelfareRewardAmountSampleInput.ProtoReflect.Descriptor instead.
func (*GetWelfareRewardAmountSampleInput) Descriptor() ([]byte, []int) {
	return file_election_contract_proto_rawDescGZIP(), []int{8}
}

func (x *GetWelfareRewardAmountSampleInput) GetValue() []int64 {
	if x != nil {
		return x.Value
	}
	return nil
}

type GetWelfareRewardAmountSampleOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The weight calculated.
	Value []int64 `protobuf:"varint,1,rep,packed,name=value,proto3" json:"value,omitempty"`
}

func (x *GetWelfareRewardAmountSampleOutput) Reset() {
	*x = GetWelfareRewardAmountSampleOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_election_contract_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWelfareRewardAmountSampleOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWelfareRewardAmountSampleOutput) ProtoMessage() {}

func (x *GetWelfareRewardAmountSampleOutput) ProtoReflect() protoreflect.Message {
	mi := &file_election_contract_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWelfareRewardAmountSampleOutput.ProtoReflect.Descriptor instead.
func (*GetWelfareRewardAmountSampleOutput) Descriptor() ([]byte, []int) {
	return file_election_contract_proto_rawDescGZIP(), []int{9}
}

func (x *GetWelfareRewardAmountSampleOutput) GetValue() []int64 {
	if x != nil {
		return x.Value
	}
	return nil
}

type PageInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The start index.
	Start int32 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	// The number of records.
	Length int32 `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *PageInformation) Reset() {
	*x = PageInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_election_contract_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInformation) ProtoMessage() {}

func (x *PageInformation) ProtoReflect() protoreflect.Message {
	mi := &file_election_contract_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInformation.ProtoReflect.Descriptor instead.
func (*PageInformation) Descriptor() ([]byte, []int) {
	return file_election_contract_proto_rawDescGZIP(), []int{10}
}

func (x *PageInformation) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *PageInformation) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

type CandidateDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The candidate information.
	CandidateInformation *CandidateInformation `protobuf:"bytes,1,opt,name=candidate_information,json=candidateInformation,proto3" json:"candidate_information,omitempty"`
	// The number of votes a candidate has obtained.
	ObtainedVotesAmount int64 `protobuf:"varint,2,opt,name=obtained_votes_amount,json=obtainedVotesAmount,proto3" json:"obtained_votes_amount,omitempty"`
}

func (x *CandidateDetail) Reset() {
	*x = CandidateDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_election_contract_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CandidateDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandidateDetail) ProtoMessage() {}

func (x *CandidateDetail) ProtoReflect() protoreflect.Message {
	mi := &file_election_contract_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandidateDetail.ProtoReflect.Descriptor instead.
func (*CandidateDetail) Descriptor() ([]byte, []int) {
	return file_election_contract_proto_rawDescGZIP(), []int{11}
}

func (x *CandidateDetail) GetCandidateInformation() *CandidateInformation {
	if x != nil {
		return x.CandidateInformation
	}
	return nil
}

func (x *CandidateDetail) GetObtainedVotesAmount() int64 {
	if x != nil {
		return x.ObtainedVotesAmount
	}
	return 0
}

type GetPageableCandidateInformationOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The details of the candidates.
	Value []*CandidateDetail `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *GetPageableCandidateInformationOutput) Reset() {
	*x = GetPageableCandidateInformationOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_election_contract_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPageableCandidateInformationOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPageableCandidateInformationOutput) ProtoMessage() {}

func (x *GetPageableCandidateInformationOutput) ProtoReflect() protoreflect.Message {
	mi := &file_election_contract_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPageableCandidateInformationOutput.ProtoReflect.Descriptor instead.
func (*GetPageableCandidateInformationOutput) Descriptor() ([]byte, []int) {
	return file_election_contract_proto_rawDescGZIP(), []int{12}
}

func (x *GetPageableCandidateInformationOutput) GetValue() []*CandidateDetail {
	if x != nil {
		return x.Value
	}
	return nil
}

type DataCenterRankingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The top n * 5 candidates with vote amount, candidate public key -> vote amount.
	DataCenters  map[string]int64 `protobuf:"bytes,1,rep,name=data_centers,json=dataCenters,proto3" json:"data_centers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MinimumVotes int64            `protobuf:"varint,2,opt,name=minimum_votes,json=minimumVotes,proto3" json:"minimum_votes,omitempty"`
}

func (x *DataCenterRankingList) Reset() {
	*x = DataCenterRankingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_election_contract_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataCenterRankingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataCenterRankingList) ProtoMessage() {}

func (x *DataCenterRankingList) ProtoReflect() protoreflect.Message {
	mi := &file_election_contract_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataCenterRankingList.ProtoReflect.Descriptor instead.
func (*DataCenterRankingList) Descriptor() ([]byte, []int) {
	return file_election_contract_proto_rawDescGZIP(), []int{13}
}

func (x *DataCenterRankingList) GetDataCenters() map[string]int64 {
	if x != nil {
		return x.DataCenters
	}
	return nil
}

func (x *DataCenterRankingList) GetMinimumVotes() int64 {
	if x != nil {
		return x.MinimumVotes
	}
	return 0
}

var File_election_contract_proto protoreflect.FileDescriptor

var file_election_contract_proto_rawDesc = []byte{
	0x0a, 0x17, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xd9, 0x02, 0x0a, 0x14, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x69, 0x73,
	0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x1b,
	0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x1b,
	0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x19, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x22, 0x37, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xf1, 0x01, 0x0a, 0x0c, 0x54, 0x65, 0x72, 0x6d, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x65, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x12, 0x51, 0x0a, 0x0f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x41, 0x0a, 0x13, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x39, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0xc9, 0x01, 0x0a, 0x0e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x72, 0x6d, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x65,
	0x72, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x1a, 0x3a, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xd1, 0x03, 0x0a, 0x0b, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x56, 0x6f, 0x74, 0x65,
	0x12, 0x45, 0x0a, 0x18, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x6f, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x15, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x73, 0x12, 0x4b, 0x0a, 0x1b, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x6e, 0x5f, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x18, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x49, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76,
	0x6f, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56,
	0x6f, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x33, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x74,
	0x65, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x61, 0x6c, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x15, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76,
	0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x54, 0x0a, 0x17, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x6e, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x15, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x6e,
	0x56, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x22, 0x92, 0x04, 0x0a, 0x14, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x25, 0x0a,
	0x05, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x05, 0x76,
	0x6f, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65,
	0x72, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x74, 0x65, 0x72, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x07, 0x76,
	0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x06, 0x76, 0x6f, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x45, 0x0a, 0x10, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x49, 0x0a, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x41, 0x0a, 0x0e, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x76, 0x6f, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0xb9, 0x04, 0x0a, 0x0d, 0x43, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x56, 0x0a, 0x21, 0x6f,
	0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76,
	0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x1d, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x49, 0x64, 0x73, 0x12, 0x5c, 0x0a, 0x24, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x6e, 0x5f, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x20, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64,
	0x73, 0x12, 0x4a, 0x0a, 0x22, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1e, 0x6f,
	0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x6f, 0x74,
	0x65, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a,
	0x1f, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x76, 0x6f,
	0x74, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x61, 0x6c, 0x6c, 0x4f, 0x62, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x61, 0x0a, 0x1e, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x1b, 0x6f, 0x62, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x65, 0x0a, 0x20, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x6e, 0x5f, 0x76, 0x6f, 0x74,
	0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x1d,
	0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x6e, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70,
	0x75, 0x62, 0x6b, 0x65, 0x79, 0x22, 0x39, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x57, 0x65, 0x6c, 0x66,
	0x61, 0x72, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x3a, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x57, 0x65, 0x6c, 0x66, 0x61, 0x72, 0x65, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3f, 0x0a, 0x0f,
	0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x98, 0x01,
	0x0a, 0x0f, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x51, 0x0a, 0x15, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14,
	0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x56, 0x6f, 0x74,
	0x65, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x56, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xcf, 0x01, 0x0a, 0x15, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x0c, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x56, 0x6f, 0x74,
	0x65, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_election_contract_proto_rawDescOnce sync.Once
	file_election_contract_proto_rawDescData = file_election_contract_proto_rawDesc
)

func file_election_contract_proto_rawDescGZIP() []byte {
	file_election_contract_proto_rawDescOnce.Do(func() {
		file_election_contract_proto_rawDescData = protoimpl.X.CompressGZIP(file_election_contract_proto_rawDescData)
	})
	return file_election_contract_proto_rawDescData
}

var file_election_contract_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_election_contract_proto_goTypes = []interface{}{
	(*CandidateInformation)(nil),                  // 0: client.CandidateInformation
	(*GetTermSnapshotInput)(nil),                  // 1: client.GetTermSnapshotInput
	(*TermSnapshot)(nil),                          // 2: client.TermSnapshot
	(*GetElectionResultInput)(nil),                // 3: client.GetElectionResultInput
	(*ElectionResult)(nil),                        // 4: client.ElectionResult
	(*ElectorVote)(nil),                           // 5: client.ElectorVote
	(*ElectionVotingRecord)(nil),                  // 6: client.ElectionVotingRecord
	(*CandidateVote)(nil),                         // 7: client.CandidateVote
	(*GetWelfareRewardAmountSampleInput)(nil),     // 8: client.GetWelfareRewardAmountSampleInput
	(*GetWelfareRewardAmountSampleOutput)(nil),    // 9: client.GetWelfareRewardAmountSampleOutput
	(*PageInformation)(nil),                       // 10: client.PageInformation
	(*CandidateDetail)(nil),                       // 11: client.CandidateDetail
	(*GetPageableCandidateInformationOutput)(nil), // 12: client.GetPageableCandidateInformationOutput
	(*DataCenterRankingList)(nil),                 // 13: client.DataCenterRankingList
	nil,                                           // 14: client.TermSnapshot.ElectionResultEntry
	nil,                                           // 15: client.ElectionResult.ResultsEntry
	nil,                                           // 16: client.DataCenterRankingList.DataCentersEntry
	(*Hash)(nil),                                  // 17: client.Hash
	(*Address)(nil),                               // 18: client.Address
	(*timestamp.Timestamp)(nil),                   // 19: google.protobuf.Timestamp
}
var file_election_contract_proto_depIdxs = []int32{
	17, // 0: client.CandidateInformation.announcement_transaction_id:type_name -> client.Hash
	14, // 1: client.TermSnapshot.election_result:type_name -> client.TermSnapshot.ElectionResultEntry
	15, // 2: client.ElectionResult.results:type_name -> client.ElectionResult.ResultsEntry
	17, // 3: client.ElectorVote.active_voting_record_ids:type_name -> client.Hash
	17, // 4: client.ElectorVote.withdrawn_voting_record_ids:type_name -> client.Hash
	6,  // 5: client.ElectorVote.active_voting_records:type_name -> client.ElectionVotingRecord
	6,  // 6: client.ElectorVote.withdrawn_votes_records:type_name -> client.ElectionVotingRecord
	18, // 7: client.ElectionVotingRecord.voter:type_name -> client.Address
	17, // 8: client.ElectionVotingRecord.vote_id:type_name -> client.Hash
	19, // 9: client.ElectionVotingRecord.unlock_timestamp:type_name -> google.protobuf.Timestamp
	19, // 10: client.ElectionVotingRecord.withdraw_timestamp:type_name -> google.protobuf.Timestamp
	19, // 11: client.ElectionVotingRecord.vote_timestamp:type_name -> google.protobuf.Timestamp
	17, // 12: client.CandidateVote.obtained_active_voting_record_ids:type_name -> client.Hash
	17, // 13: client.CandidateVote.obtained_withdrawn_voting_record_ids:type_name -> client.Hash
	6,  // 14: client.CandidateVote.obtained_active_voting_records:type_name -> client.ElectionVotingRecord
	6,  // 15: client.CandidateVote.obtained_withdrawn_votes_records:type_name -> client.ElectionVotingRecord
	0,  // 16: client.CandidateDetail.candidate_information:type_name -> client.CandidateInformation
	11, // 17: client.GetPageableCandidateInformationOutput.value:type_name -> client.CandidateDetail
	16, // 18: client.DataCenterRankingList.data_centers:type_name -> client.DataCenterRankingList.DataCentersEntry
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_election_contract_proto_init() }
func file_election_contract_proto_init() {
	if File_election_contract_proto != nil {
		return
	}
	file_client_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_election_contract_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CandidateInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_election_contract_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTermSnapshotInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_election_contract_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TermSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_election_contract_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetElectionResultInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_election_contract_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_election_contract_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectorVote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_election_contract_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionVotingRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_election_contract_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CandidateVote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_election_contract_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWelfareRewardAmountSampleInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_election_contract_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWelfareRewardAmountSampleOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_election_contract_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_election_contract_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CandidateDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_election_contract_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPageableCandidateInformationOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_election_contract_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataCenterRankingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_election_contract_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_election_contract_proto_goTypes,
		DependencyIndexes: file_election_contract_proto_depIdxs,
		MessageInfos:      file_election_contract_proto_msgTypes,
	}.Build()
	File_election_contract_proto = out.File
	file_election_contract_proto_rawDesc = nil
	file_election_contract_proto_goTypes = nil
	file_election_contract_proto_depIdxs = nil
}
