// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.11.4
// source: client.proto

package client

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ThresholdCheckType int32

const (
	// Check balance only.
	ThresholdCheckType_BALANCE ThresholdCheckType = 0
	// Check balance and allowance at the same time.
	ThresholdCheckType_ALLOWANCE ThresholdCheckType = 1
)

// Enum value maps for ThresholdCheckType.
var (
	ThresholdCheckType_name = map[int32]string{
		0: "BALANCE",
		1: "ALLOWANCE",
	}
	ThresholdCheckType_value = map[string]int32{
		"BALANCE":   0,
		"ALLOWANCE": 1,
	}
)

func (x ThresholdCheckType) Enum() *ThresholdCheckType {
	p := new(ThresholdCheckType)
	*p = x
	return p
}

func (x ThresholdCheckType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ThresholdCheckType) Descriptor() protoreflect.EnumDescriptor {
	return file_client_proto_enumTypes[0].Descriptor()
}

func (ThresholdCheckType) Type() protoreflect.EnumType {
	return &file_client_proto_enumTypes[0]
}

func (x ThresholdCheckType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ThresholdCheckType.Descriptor instead.
func (ThresholdCheckType) EnumDescriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{0}
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{0}
}

func (x *Address) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type Hash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Hash) Reset() {
	*x = Hash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hash) ProtoMessage() {}

func (x *Hash) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hash.ProtoReflect.Descriptor instead.
func (*Hash) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{1}
}

func (x *Hash) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type MerklePath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerklePathNodes []*MerklePathNode `protobuf:"bytes,1,rep,name=merkle_path_nodes,json=merklePathNodes,proto3" json:"merkle_path_nodes,omitempty"`
}

func (x *MerklePath) Reset() {
	*x = MerklePath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerklePath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerklePath) ProtoMessage() {}

func (x *MerklePath) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerklePath.ProtoReflect.Descriptor instead.
func (*MerklePath) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{2}
}

func (x *MerklePath) GetMerklePathNodes() []*MerklePathNode {
	if x != nil {
		return x.MerklePathNodes
	}
	return nil
}

type MerklePathNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash            *Hash `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	IsLeftChildNode bool  `protobuf:"varint,2,opt,name=is_left_child_node,json=isLeftChildNode,proto3" json:"is_left_child_node,omitempty"`
}

func (x *MerklePathNode) Reset() {
	*x = MerklePathNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerklePathNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerklePathNode) ProtoMessage() {}

func (x *MerklePathNode) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerklePathNode.ProtoReflect.Descriptor instead.
func (*MerklePathNode) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{3}
}

func (x *MerklePathNode) GetHash() *Hash {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *MerklePathNode) GetIsLeftChildNode() bool {
	if x != nil {
		return x.IsLeftChildNode
	}
	return false
}

type BinaryMerkleTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes     []*Hash `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Root      *Hash   `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`
	LeafCount int32   `protobuf:"varint,3,opt,name=leaf_count,json=leafCount,proto3" json:"leaf_count,omitempty"`
}

func (x *BinaryMerkleTree) Reset() {
	*x = BinaryMerkleTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinaryMerkleTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryMerkleTree) ProtoMessage() {}

func (x *BinaryMerkleTree) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryMerkleTree.ProtoReflect.Descriptor instead.
func (*BinaryMerkleTree) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{4}
}

func (x *BinaryMerkleTree) GetNodes() []*Hash {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *BinaryMerkleTree) GetRoot() *Hash {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *BinaryMerkleTree) GetLeafCount() int32 {
	if x != nil {
		return x.LeafCount
	}
	return 0
}

type ScopedStatePath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *Address   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Path    *StatePath `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *ScopedStatePath) Reset() {
	*x = ScopedStatePath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScopedStatePath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScopedStatePath) ProtoMessage() {}

func (x *ScopedStatePath) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScopedStatePath.ProtoReflect.Descriptor instead.
func (*ScopedStatePath) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{5}
}

func (x *ScopedStatePath) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *ScopedStatePath) GetPath() *StatePath {
	if x != nil {
		return x.Path
	}
	return nil
}

type StatePath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parts []string `protobuf:"bytes,1,rep,name=parts,proto3" json:"parts,omitempty"`
}

func (x *StatePath) Reset() {
	*x = StatePath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatePath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatePath) ProtoMessage() {}

func (x *StatePath) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatePath.ProtoReflect.Descriptor instead.
func (*StatePath) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{6}
}

func (x *StatePath) GetParts() []string {
	if x != nil {
		return x.Parts
	}
	return nil
}

type SmartContractRegistration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category         int32  `protobuf:"zigzag32,1,opt,name=category,proto3" json:"category,omitempty"`
	Code             []byte `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	CodeHash         *Hash  `protobuf:"bytes,3,opt,name=code_hash,json=codeHash,proto3" json:"code_hash,omitempty"`
	IsSystemContract bool   `protobuf:"varint,4,opt,name=is_system_contract,json=isSystemContract,proto3" json:"is_system_contract,omitempty"`
	Version          int32  `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *SmartContractRegistration) Reset() {
	*x = SmartContractRegistration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmartContractRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartContractRegistration) ProtoMessage() {}

func (x *SmartContractRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartContractRegistration.ProtoReflect.Descriptor instead.
func (*SmartContractRegistration) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{7}
}

func (x *SmartContractRegistration) GetCategory() int32 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *SmartContractRegistration) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *SmartContractRegistration) GetCodeHash() *Hash {
	if x != nil {
		return x.CodeHash
	}
	return nil
}

func (x *SmartContractRegistration) GetIsSystemContract() bool {
	if x != nil {
		return x.IsSystemContract
	}
	return false
}

func (x *SmartContractRegistration) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

//acs0
type ContractInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The serial number of the contract.
	SerialNumber int64 `protobuf:"varint,1,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	// The author of the contract, this is the person who deployed the contract.
	Author *Address `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	// The category of contract code(0: C#).
	Category int32 `protobuf:"zigzag32,3,opt,name=category,proto3" json:"category,omitempty"`
	// The hash of the contract code.
	CodeHash *Hash `protobuf:"bytes,4,opt,name=code_hash,json=codeHash,proto3" json:"code_hash,omitempty"`
	// Whether it is a system contract.
	IsSystemContract bool `protobuf:"varint,5,opt,name=is_system_contract,json=isSystemContract,proto3" json:"is_system_contract,omitempty"`
	// The version of the current contract.
	Version int32 `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ContractInfo) Reset() {
	*x = ContractInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractInfo) ProtoMessage() {}

func (x *ContractInfo) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractInfo.ProtoReflect.Descriptor instead.
func (*ContractInfo) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{8}
}

func (x *ContractInfo) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *ContractInfo) GetAuthor() *Address {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *ContractInfo) GetCategory() int32 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *ContractInfo) GetCodeHash() *Hash {
	if x != nil {
		return x.CodeHash
	}
	return nil
}

func (x *ContractInfo) GetIsSystemContract() bool {
	if x != nil {
		return x.IsSystemContract
	}
	return false
}

func (x *ContractInfo) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

//acs1
type MethodFees struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the method to be charged.
	MethodName string `protobuf:"bytes,1,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`
	// List of fees to be charged.
	Fees []*MethodFee `protobuf:"bytes,2,rep,name=fees,proto3" json:"fees,omitempty"`
	// Optional based on the implementation of SetMethodFee method.
	IsSizeFeeFree bool `protobuf:"varint,3,opt,name=is_size_fee_free,json=isSizeFeeFree,proto3" json:"is_size_fee_free,omitempty"`
}

func (x *MethodFees) Reset() {
	*x = MethodFees{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MethodFees) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodFees) ProtoMessage() {}

func (x *MethodFees) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodFees.ProtoReflect.Descriptor instead.
func (*MethodFees) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{9}
}

func (x *MethodFees) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

func (x *MethodFees) GetFees() []*MethodFee {
	if x != nil {
		return x.Fees
	}
	return nil
}

func (x *MethodFees) GetIsSizeFeeFree() bool {
	if x != nil {
		return x.IsSizeFeeFree
	}
	return false
}

type MethodFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the method to be charged.
	MethodName string `protobuf:"bytes,1,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`
	// List of fees to be charged.
	Fees []*MethodFee `protobuf:"bytes,2,rep,name=fees,proto3" json:"fees,omitempty"`
	// Optional based on the implementation of SetMethodFee method.
	IsSizeFeeFree bool `protobuf:"varint,3,opt,name=is_size_fee_free,json=isSizeFeeFree,proto3" json:"is_size_fee_free,omitempty"`
}

func (x *MethodFee) Reset() {
	*x = MethodFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MethodFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodFee) ProtoMessage() {}

func (x *MethodFee) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodFee.ProtoReflect.Descriptor instead.
func (*MethodFee) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{10}
}

func (x *MethodFee) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

func (x *MethodFee) GetFees() []*MethodFee {
	if x != nil {
		return x.Fees
	}
	return nil
}

func (x *MethodFee) GetIsSizeFeeFree() bool {
	if x != nil {
		return x.IsSizeFeeFree
	}
	return false
}

//acs2
type ResourceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The state path that depends on when writing.
	WritePaths []*ScopedStatePath `protobuf:"bytes,1,rep,name=write_paths,json=writePaths,proto3" json:"write_paths,omitempty"`
	// The state path that depends on when reading.
	ReadPaths []*ScopedStatePath `protobuf:"bytes,2,rep,name=read_paths,json=readPaths,proto3" json:"read_paths,omitempty"`
	// Whether the transaction is not executed in parallel.
	NonParallelizable bool `protobuf:"varint,3,opt,name=non_parallelizable,json=nonParallelizable,proto3" json:"non_parallelizable,omitempty"`
}

func (x *ResourceInfo) Reset() {
	*x = ResourceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceInfo) ProtoMessage() {}

func (x *ResourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceInfo.ProtoReflect.Descriptor instead.
func (*ResourceInfo) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{11}
}

func (x *ResourceInfo) GetWritePaths() []*ScopedStatePath {
	if x != nil {
		return x.WritePaths
	}
	return nil
}

func (x *ResourceInfo) GetReadPaths() []*ScopedStatePath {
	if x != nil {
		return x.ReadPaths
	}
	return nil
}

func (x *ResourceInfo) GetNonParallelizable() bool {
	if x != nil {
		return x.NonParallelizable
	}
	return false
}

// acs3
type ProposalOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the proposal.
	ProposalId *Hash `protobuf:"bytes,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	// The method that this proposal will call when being released.
	ContractMethodName string `protobuf:"bytes,2,opt,name=contract_method_name,json=contractMethodName,proto3" json:"contract_method_name,omitempty"`
	// The address of the target contract.
	ToAddress *Address `protobuf:"bytes,3,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	// The parameters of the release transaction.
	Params []byte `protobuf:"bytes,4,opt,name=params,proto3" json:"params,omitempty"`
	// The date at which this proposal will expire.
	ExpiredTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=expired_time,json=expiredTime,proto3" json:"expired_time,omitempty"`
	// The address of this proposals organization.
	OrganizationAddress *Address `protobuf:"bytes,6,opt,name=organization_address,json=organizationAddress,proto3" json:"organization_address,omitempty"`
	// The address of the proposer of this proposal.
	Proposer *Address `protobuf:"bytes,7,opt,name=proposer,proto3" json:"proposer,omitempty"`
	// Indicates if this proposal is releasable.
	ToBeReleased bool `protobuf:"varint,8,opt,name=to_be_released,json=toBeReleased,proto3" json:"to_be_released,omitempty"`
	// Approval count for this proposal.
	ApprovalCount int64 `protobuf:"varint,9,opt,name=approval_count,json=approvalCount,proto3" json:"approval_count,omitempty"`
	// Rejection count for this proposal.
	RejectionCount int64 `protobuf:"varint,10,opt,name=rejection_count,json=rejectionCount,proto3" json:"rejection_count,omitempty"`
	// Abstention count for this proposal.
	AbstentionCount int64 `protobuf:"varint,11,opt,name=abstention_count,json=abstentionCount,proto3" json:"abstention_count,omitempty"`
}

func (x *ProposalOutput) Reset() {
	*x = ProposalOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalOutput) ProtoMessage() {}

func (x *ProposalOutput) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalOutput.ProtoReflect.Descriptor instead.
func (*ProposalOutput) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{12}
}

func (x *ProposalOutput) GetProposalId() *Hash {
	if x != nil {
		return x.ProposalId
	}
	return nil
}

func (x *ProposalOutput) GetContractMethodName() string {
	if x != nil {
		return x.ContractMethodName
	}
	return ""
}

func (x *ProposalOutput) GetToAddress() *Address {
	if x != nil {
		return x.ToAddress
	}
	return nil
}

func (x *ProposalOutput) GetParams() []byte {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *ProposalOutput) GetExpiredTime() *timestamp.Timestamp {
	if x != nil {
		return x.ExpiredTime
	}
	return nil
}

func (x *ProposalOutput) GetOrganizationAddress() *Address {
	if x != nil {
		return x.OrganizationAddress
	}
	return nil
}

func (x *ProposalOutput) GetProposer() *Address {
	if x != nil {
		return x.Proposer
	}
	return nil
}

func (x *ProposalOutput) GetToBeReleased() bool {
	if x != nil {
		return x.ToBeReleased
	}
	return false
}

func (x *ProposalOutput) GetApprovalCount() int64 {
	if x != nil {
		return x.ApprovalCount
	}
	return 0
}

func (x *ProposalOutput) GetRejectionCount() int64 {
	if x != nil {
		return x.RejectionCount
	}
	return 0
}

func (x *ProposalOutput) GetAbstentionCount() int64 {
	if x != nil {
		return x.AbstentionCount
	}
	return 0
}

type ProposalReleaseThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The value for the minimum approval threshold.
	MinimalApprovalThreshold int64 `protobuf:"varint,1,opt,name=minimal_approval_threshold,json=minimalApprovalThreshold,proto3" json:"minimal_approval_threshold,omitempty"`
	// The value for the maximal rejection threshold.
	MaximalRejectionThreshold int64 `protobuf:"varint,2,opt,name=maximal_rejection_threshold,json=maximalRejectionThreshold,proto3" json:"maximal_rejection_threshold,omitempty"`
	// The value for the maximal abstention threshold.
	MaximalAbstentionThreshold int64 `protobuf:"varint,3,opt,name=maximal_abstention_threshold,json=maximalAbstentionThreshold,proto3" json:"maximal_abstention_threshold,omitempty"`
	// The value for the minimal vote threshold.
	MinimalVoteThreshold int64 `protobuf:"varint,4,opt,name=minimal_vote_threshold,json=minimalVoteThreshold,proto3" json:"minimal_vote_threshold,omitempty"`
}

func (x *ProposalReleaseThreshold) Reset() {
	*x = ProposalReleaseThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalReleaseThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalReleaseThreshold) ProtoMessage() {}

func (x *ProposalReleaseThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalReleaseThreshold.ProtoReflect.Descriptor instead.
func (*ProposalReleaseThreshold) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{13}
}

func (x *ProposalReleaseThreshold) GetMinimalApprovalThreshold() int64 {
	if x != nil {
		return x.MinimalApprovalThreshold
	}
	return 0
}

func (x *ProposalReleaseThreshold) GetMaximalRejectionThreshold() int64 {
	if x != nil {
		return x.MaximalRejectionThreshold
	}
	return 0
}

func (x *ProposalReleaseThreshold) GetMaximalAbstentionThreshold() int64 {
	if x != nil {
		return x.MaximalAbstentionThreshold
	}
	return 0
}

func (x *ProposalReleaseThreshold) GetMinimalVoteThreshold() int64 {
	if x != nil {
		return x.MinimalVoteThreshold
	}
	return 0
}

type ProposerWhiteList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address of the proposers
	Proposers []*Address `protobuf:"bytes,1,rep,name=proposers,proto3" json:"proposers,omitempty"`
}

func (x *ProposerWhiteList) Reset() {
	*x = ProposerWhiteList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposerWhiteList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposerWhiteList) ProtoMessage() {}

func (x *ProposerWhiteList) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposerWhiteList.ProtoReflect.Descriptor instead.
func (*ProposerWhiteList) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{14}
}

func (x *ProposerWhiteList) GetProposers() []*Address {
	if x != nil {
		return x.Proposers
	}
	return nil
}

type ValidationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Is successful.
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// The error message.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Whether to trigger mining again.
	IsReTrigger bool `protobuf:"varint,3,opt,name=is_re_trigger,json=isReTrigger,proto3" json:"is_re_trigger,omitempty"`
}

func (x *ValidationResult) Reset() {
	*x = ValidationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationResult) ProtoMessage() {}

func (x *ValidationResult) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationResult.ProtoReflect.Descriptor instead.
func (*ValidationResult) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{15}
}

func (x *ValidationResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ValidationResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ValidationResult) GetIsReTrigger() bool {
	if x != nil {
		return x.IsReTrigger
	}
	return false
}

//acs5
type MethodCallingThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The threshold for method calling, token symbol -> amount.
	SymbolToAmount map[string]int64 `protobuf:"bytes,1,rep,name=symbol_to_amount,json=symbolToAmount,proto3" json:"symbol_to_amount,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// The type of threshold check.
	ThresholdCheckType ThresholdCheckType `protobuf:"varint,2,opt,name=threshold_check_type,json=thresholdCheckType,proto3,enum=client.ThresholdCheckType" json:"threshold_check_type,omitempty"`
}

func (x *MethodCallingThreshold) Reset() {
	*x = MethodCallingThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MethodCallingThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodCallingThreshold) ProtoMessage() {}

func (x *MethodCallingThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodCallingThreshold.ProtoReflect.Descriptor instead.
func (*MethodCallingThreshold) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{16}
}

func (x *MethodCallingThreshold) GetSymbolToAmount() map[string]int64 {
	if x != nil {
		return x.SymbolToAmount
	}
	return nil
}

func (x *MethodCallingThreshold) GetThresholdCheckType() ThresholdCheckType {
	if x != nil {
		return x.ThresholdCheckType
	}
	return ThresholdCheckType_BALANCE
}

type SideChainIndexingInformationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list contains indexing information of side chains.
	IndexingInformationList []*SideChainIndexingInformation `protobuf:"bytes,1,rep,name=indexing_information_list,json=indexingInformationList,proto3" json:"indexing_information_list,omitempty"`
}

func (x *SideChainIndexingInformationList) Reset() {
	*x = SideChainIndexingInformationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SideChainIndexingInformationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SideChainIndexingInformationList) ProtoMessage() {}

func (x *SideChainIndexingInformationList) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SideChainIndexingInformationList.ProtoReflect.Descriptor instead.
func (*SideChainIndexingInformationList) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{17}
}

func (x *SideChainIndexingInformationList) GetIndexingInformationList() []*SideChainIndexingInformation {
	if x != nil {
		return x.IndexingInformationList
	}
	return nil
}

type SideChainIndexingInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The side chain id.
	ChainId int32 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// The indexed height.
	IndexedHeight int64 `protobuf:"varint,2,opt,name=indexed_height,json=indexedHeight,proto3" json:"indexed_height,omitempty"`
}

func (x *SideChainIndexingInformation) Reset() {
	*x = SideChainIndexingInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SideChainIndexingInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SideChainIndexingInformation) ProtoMessage() {}

func (x *SideChainIndexingInformation) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SideChainIndexingInformation.ProtoReflect.Descriptor instead.
func (*SideChainIndexingInformation) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{18}
}

func (x *SideChainIndexingInformation) GetChainId() int32 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *SideChainIndexingInformation) GetIndexedHeight() int64 {
	if x != nil {
		return x.IndexedHeight
	}
	return 0
}

type CrossChainBlockData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The side chain block data list to index.
	SideChainBlockDataList []*SideChainBlockData `protobuf:"bytes,1,rep,name=side_chain_block_data_list,json=sideChainBlockDataList,proto3" json:"side_chain_block_data_list,omitempty"`
	// The parent chain block data list to index.
	ParentChainBlockDataList []*ParentChainBlockData `protobuf:"bytes,2,rep,name=parent_chain_block_data_list,json=parentChainBlockDataList,proto3" json:"parent_chain_block_data_list,omitempty"`
}

func (x *CrossChainBlockData) Reset() {
	*x = CrossChainBlockData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossChainBlockData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossChainBlockData) ProtoMessage() {}

func (x *CrossChainBlockData) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossChainBlockData.ProtoReflect.Descriptor instead.
func (*CrossChainBlockData) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{19}
}

func (x *CrossChainBlockData) GetSideChainBlockDataList() []*SideChainBlockData {
	if x != nil {
		return x.SideChainBlockDataList
	}
	return nil
}

func (x *CrossChainBlockData) GetParentChainBlockDataList() []*ParentChainBlockData {
	if x != nil {
		return x.ParentChainBlockDataList
	}
	return nil
}

type SideChainBlockData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The height of side chain block.
	Height int64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	// The hash of side chain block.
	BlockHeaderHash *Hash `protobuf:"bytes,2,opt,name=block_header_hash,json=blockHeaderHash,proto3" json:"block_header_hash,omitempty"`
	// The merkle tree root computing from transactions status in side chain block.
	TransactionStatusMerkleTreeRoot *Hash `protobuf:"bytes,3,opt,name=transaction_status_merkle_tree_root,json=transactionStatusMerkleTreeRoot,proto3" json:"transaction_status_merkle_tree_root,omitempty"`
	// The id of side chain.
	ChainId int32 `protobuf:"varint,4,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (x *SideChainBlockData) Reset() {
	*x = SideChainBlockData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SideChainBlockData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SideChainBlockData) ProtoMessage() {}

func (x *SideChainBlockData) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SideChainBlockData.ProtoReflect.Descriptor instead.
func (*SideChainBlockData) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{20}
}

func (x *SideChainBlockData) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *SideChainBlockData) GetBlockHeaderHash() *Hash {
	if x != nil {
		return x.BlockHeaderHash
	}
	return nil
}

func (x *SideChainBlockData) GetTransactionStatusMerkleTreeRoot() *Hash {
	if x != nil {
		return x.TransactionStatusMerkleTreeRoot
	}
	return nil
}

func (x *SideChainBlockData) GetChainId() int32 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

type ParentChainBlockData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The height of parent chain.
	Height int64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	// The merkle tree root computing from side chain roots.
	CrossChainExtraData *CrossChainExtraData `protobuf:"bytes,2,opt,name=cross_chain_extra_data,json=crossChainExtraData,proto3" json:"cross_chain_extra_data,omitempty"`
	// The parent chain id.
	ChainId int32 `protobuf:"varint,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// The merkle tree root computing from transactions status in parent chain block.
	TransactionStatusMerkleTreeRoot *Hash `protobuf:"bytes,4,opt,name=transaction_status_merkle_tree_root,json=transactionStatusMerkleTreeRoot,proto3" json:"transaction_status_merkle_tree_root,omitempty"`
	// Indexed block height from side chain and merkle path for this side chain block
	IndexedMerklePath map[int64]*MerklePath `protobuf:"bytes,5,rep,name=indexed_merkle_path,json=indexedMerklePath,proto3" json:"indexed_merkle_path,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Extra data map.
	ExtraData map[string][]byte `protobuf:"bytes,6,rep,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ParentChainBlockData) Reset() {
	*x = ParentChainBlockData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParentChainBlockData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParentChainBlockData) ProtoMessage() {}

func (x *ParentChainBlockData) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParentChainBlockData.ProtoReflect.Descriptor instead.
func (*ParentChainBlockData) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{21}
}

func (x *ParentChainBlockData) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ParentChainBlockData) GetCrossChainExtraData() *CrossChainExtraData {
	if x != nil {
		return x.CrossChainExtraData
	}
	return nil
}

func (x *ParentChainBlockData) GetChainId() int32 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *ParentChainBlockData) GetTransactionStatusMerkleTreeRoot() *Hash {
	if x != nil {
		return x.TransactionStatusMerkleTreeRoot
	}
	return nil
}

func (x *ParentChainBlockData) GetIndexedMerklePath() map[int64]*MerklePath {
	if x != nil {
		return x.IndexedMerklePath
	}
	return nil
}

func (x *ParentChainBlockData) GetExtraData() map[string][]byte {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

type CrossChainExtraData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Merkle tree root of side chain block transaction status root
	TransactionStatusMerkleTreeRoot *Hash `protobuf:"bytes,1,opt,name=transaction_status_merkle_tree_root,json=transactionStatusMerkleTreeRoot,proto3" json:"transaction_status_merkle_tree_root,omitempty"`
}

func (x *CrossChainExtraData) Reset() {
	*x = CrossChainExtraData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossChainExtraData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossChainExtraData) ProtoMessage() {}

func (x *CrossChainExtraData) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossChainExtraData.ProtoReflect.Descriptor instead.
func (*CrossChainExtraData) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{22}
}

func (x *CrossChainExtraData) GetTransactionStatusMerkleTreeRoot() *Hash {
	if x != nil {
		return x.TransactionStatusMerkleTreeRoot
	}
	return nil
}

type CrossChainMerkleProofContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The height of parent chain bound up with side chain.
	BoundParentChainHeight int64 `protobuf:"varint,1,opt,name=bound_parent_chain_height,json=boundParentChainHeight,proto3" json:"bound_parent_chain_height,omitempty"`
	// The merkle path generated from parent chain.
	MerklePathFromParentChain *MerklePath `protobuf:"bytes,2,opt,name=merkle_path_from_parent_chain,json=merklePathFromParentChain,proto3" json:"merkle_path_from_parent_chain,omitempty"`
}

func (x *CrossChainMerkleProofContext) Reset() {
	*x = CrossChainMerkleProofContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossChainMerkleProofContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossChainMerkleProofContext) ProtoMessage() {}

func (x *CrossChainMerkleProofContext) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossChainMerkleProofContext.ProtoReflect.Descriptor instead.
func (*CrossChainMerkleProofContext) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{23}
}

func (x *CrossChainMerkleProofContext) GetBoundParentChainHeight() int64 {
	if x != nil {
		return x.BoundParentChainHeight
	}
	return 0
}

func (x *CrossChainMerkleProofContext) GetMerklePathFromParentChain() *MerklePath {
	if x != nil {
		return x.MerklePathFromParentChain
	}
	return nil
}

type ChainInitializationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of side chain.
	ChainId int32 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// The side chain creator.
	Creator *Address `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	// The timestamp for side chain creation.
	CreationTimestamp *timestamp.Timestamp `protobuf:"bytes,3,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	// The height of side chain creation on parent chain.
	CreationHeightOnParentChain int64 `protobuf:"varint,4,opt,name=creation_height_on_parent_chain,json=creationHeightOnParentChain,proto3" json:"creation_height_on_parent_chain,omitempty"`
	// Creator privilege boolean flag: True if chain creator privilege preserved, otherwise false.
	ChainCreatorPrivilegePreserved bool `protobuf:"varint,5,opt,name=chain_creator_privilege_preserved,json=chainCreatorPrivilegePreserved,proto3" json:"chain_creator_privilege_preserved,omitempty"`
	// Parent chain token contract address.
	ParentChainTokenContractAddress *Address `protobuf:"bytes,6,opt,name=parent_chain_token_contract_address,json=parentChainTokenContractAddress,proto3" json:"parent_chain_token_contract_address,omitempty"`
	// Initial consensus information.
	ChainInitializationConsensusInfo *ChainInitializationConsensusInfo `protobuf:"bytes,7,opt,name=chain_initialization_consensus_info,json=chainInitializationConsensusInfo,proto3" json:"chain_initialization_consensus_info,omitempty"`
	// The native token info.
	NativeTokenInfoData []byte `protobuf:"bytes,8,opt,name=native_token_info_data,json=nativeTokenInfoData,proto3" json:"native_token_info_data,omitempty"`
	// The resource token information.
	ResourceTokenInfo *ResourceTokenInfo `protobuf:"bytes,9,opt,name=resource_token_info,json=resourceTokenInfo,proto3" json:"resource_token_info,omitempty"`
	// The chain primary token information.
	ChainPrimaryTokenInfo *ChainPrimaryTokenInfo `protobuf:"bytes,10,opt,name=chain_primary_token_info,json=chainPrimaryTokenInfo,proto3" json:"chain_primary_token_info,omitempty"`
}

func (x *ChainInitializationData) Reset() {
	*x = ChainInitializationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainInitializationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainInitializationData) ProtoMessage() {}

func (x *ChainInitializationData) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainInitializationData.ProtoReflect.Descriptor instead.
func (*ChainInitializationData) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{24}
}

func (x *ChainInitializationData) GetChainId() int32 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *ChainInitializationData) GetCreator() *Address {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *ChainInitializationData) GetCreationTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

func (x *ChainInitializationData) GetCreationHeightOnParentChain() int64 {
	if x != nil {
		return x.CreationHeightOnParentChain
	}
	return 0
}

func (x *ChainInitializationData) GetChainCreatorPrivilegePreserved() bool {
	if x != nil {
		return x.ChainCreatorPrivilegePreserved
	}
	return false
}

func (x *ChainInitializationData) GetParentChainTokenContractAddress() *Address {
	if x != nil {
		return x.ParentChainTokenContractAddress
	}
	return nil
}

func (x *ChainInitializationData) GetChainInitializationConsensusInfo() *ChainInitializationConsensusInfo {
	if x != nil {
		return x.ChainInitializationConsensusInfo
	}
	return nil
}

func (x *ChainInitializationData) GetNativeTokenInfoData() []byte {
	if x != nil {
		return x.NativeTokenInfoData
	}
	return nil
}

func (x *ChainInitializationData) GetResourceTokenInfo() *ResourceTokenInfo {
	if x != nil {
		return x.ResourceTokenInfo
	}
	return nil
}

func (x *ChainInitializationData) GetChainPrimaryTokenInfo() *ChainPrimaryTokenInfo {
	if x != nil {
		return x.ChainPrimaryTokenInfo
	}
	return nil
}

type ResourceTokenInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource token information.
	ResourceTokenListData []byte `protobuf:"bytes,1,opt,name=resource_token_list_data,json=resourceTokenListData,proto3" json:"resource_token_list_data,omitempty"`
	// The initial resource token amount.
	InitialResourceAmount map[string]int32 `protobuf:"bytes,2,rep,name=initial_resource_amount,json=initialResourceAmount,proto3" json:"initial_resource_amount,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ResourceTokenInfo) Reset() {
	*x = ResourceTokenInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceTokenInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceTokenInfo) ProtoMessage() {}

func (x *ResourceTokenInfo) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceTokenInfo.ProtoReflect.Descriptor instead.
func (*ResourceTokenInfo) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{25}
}

func (x *ResourceTokenInfo) GetResourceTokenListData() []byte {
	if x != nil {
		return x.ResourceTokenListData
	}
	return nil
}

func (x *ResourceTokenInfo) GetInitialResourceAmount() map[string]int32 {
	if x != nil {
		return x.InitialResourceAmount
	}
	return nil
}

type ChainPrimaryTokenInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The side chain primary token data.
	ChainPrimaryTokenData []byte `protobuf:"bytes,1,opt,name=chain_primary_token_data,json=chainPrimaryTokenData,proto3" json:"chain_primary_token_data,omitempty"`
	// The side chain primary token initial issue list.
	SideChainTokenInitialIssueList []*SideChainTokenInitialIssue `protobuf:"bytes,2,rep,name=side_chain_token_initial_issue_list,json=sideChainTokenInitialIssueList,proto3" json:"side_chain_token_initial_issue_list,omitempty"`
}

func (x *ChainPrimaryTokenInfo) Reset() {
	*x = ChainPrimaryTokenInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainPrimaryTokenInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainPrimaryTokenInfo) ProtoMessage() {}

func (x *ChainPrimaryTokenInfo) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainPrimaryTokenInfo.ProtoReflect.Descriptor instead.
func (*ChainPrimaryTokenInfo) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{26}
}

func (x *ChainPrimaryTokenInfo) GetChainPrimaryTokenData() []byte {
	if x != nil {
		return x.ChainPrimaryTokenData
	}
	return nil
}

func (x *ChainPrimaryTokenInfo) GetSideChainTokenInitialIssueList() []*SideChainTokenInitialIssue {
	if x != nil {
		return x.SideChainTokenInitialIssueList
	}
	return nil
}

type ChainInitializationConsensusInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Initial consensus data.
	InitialConsensusData []byte `protobuf:"bytes,1,opt,name=initial_consensus_data,json=initialConsensusData,proto3" json:"initial_consensus_data,omitempty"`
}

func (x *ChainInitializationConsensusInfo) Reset() {
	*x = ChainInitializationConsensusInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainInitializationConsensusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainInitializationConsensusInfo) ProtoMessage() {}

func (x *ChainInitializationConsensusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainInitializationConsensusInfo.ProtoReflect.Descriptor instead.
func (*ChainInitializationConsensusInfo) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{27}
}

func (x *ChainInitializationConsensusInfo) GetInitialConsensusData() []byte {
	if x != nil {
		return x.InitialConsensusData
	}
	return nil
}

type SideChainTokenInitialIssue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The account that will be issued.
	Address *Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The amount that will be issued.
	Amount int64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *SideChainTokenInitialIssue) Reset() {
	*x = SideChainTokenInitialIssue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SideChainTokenInitialIssue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SideChainTokenInitialIssue) ProtoMessage() {}

func (x *SideChainTokenInitialIssue) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SideChainTokenInitialIssue.ProtoReflect.Descriptor instead.
func (*SideChainTokenInitialIssue) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{28}
}

func (x *SideChainTokenInitialIssue) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *SideChainTokenInitialIssue) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

var File_client_proto protoreflect.FileDescriptor

var file_client_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1f, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1c, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x50, 0x0a, 0x0a, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x42, 0x0a, 0x11, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0f, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x5f, 0x0a, 0x0e, 0x4d, 0x65, 0x72, 0x6b,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x2b, 0x0a, 0x12,
	0x69, 0x73, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x77, 0x0a, 0x10, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x12, 0x22, 0x0a,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x20, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x72,
	0x6f, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x66, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x63, 0x0a, 0x0f, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x25, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x21, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x19, 0x53,
	0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x69, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xeb, 0x01, 0x0a, 0x0c,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x27, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69,
	0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7d, 0x0a, 0x0a, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x46, 0x65, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x66, 0x65, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x46, 0x65, 0x65, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x66,
	0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x53, 0x69, 0x7a,
	0x65, 0x46, 0x65, 0x65, 0x46, 0x72, 0x65, 0x65, 0x22, 0x7c, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x46, 0x65, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x66, 0x65, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x46, 0x65, 0x65, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x10, 0x69, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x66, 0x72, 0x65,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x46,
	0x65, 0x65, 0x46, 0x72, 0x65, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x12, 0x36, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x09,
	0x72, 0x65, 0x61, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x6e, 0x6f, 0x6e,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6e, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c,
	0x65, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x8a, 0x04, 0x0a, 0x0e, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x2d, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x0a,
	0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x14, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x13, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x74, 0x6f,
	0x42, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x62,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x62, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x90, 0x02, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x3e, 0x0a, 0x1b, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x40, 0x0a, 0x1c, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x61, 0x62, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x61, 0x6c, 0x41,
	0x62, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x76, 0x6f,
	0x74, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x42, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x72, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x73, 0x22, 0x6a, 0x0a, 0x10,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x5f, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x52,
	0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x22, 0x87, 0x02, 0x0a, 0x16, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x5c, 0x0a, 0x10, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x74, 0x6f,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x61, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2e, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x54, 0x6f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x54, 0x6f, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x4c, 0x0a, 0x14, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x1a,
	0x41, 0x0a, 0x13, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x54, 0x6f, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x84, 0x01, 0x0a, 0x20, 0x53, 0x69, 0x64, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x19, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x17, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x60, 0x0a, 0x1c, 0x53, 0x69, 0x64,
	0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xcb, 0x01, 0x0a, 0x13,
	0x43, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x56, 0x0a, 0x1a, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x69, 0x64, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x16, 0x73, 0x69, 0x64, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5c, 0x0a, 0x1c, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x18, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xdd, 0x01, 0x0a, 0x12, 0x53, 0x69,
	0x64, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x38, 0x0a, 0x11, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x61, 0x73,
	0x68, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x5a, 0x0a, 0x23, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f,
	0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x1f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0xc0, 0x04, 0x0a, 0x14, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x50, 0x0a, 0x16, 0x63, 0x72,
	0x6f, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x13, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x23, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x61,
	0x73, 0x68, 0x52, 0x1f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52,
	0x6f, 0x6f, 0x74, 0x12, 0x63, 0x0a, 0x13, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x5f, 0x6d,
	0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x4d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x4a, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x1a, 0x58, 0x0a, 0x16, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x4d,
	0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c,
	0x0a, 0x0e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x71, 0x0a, 0x13,
	0x43, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x5a, 0x0a, 0x23, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65,
	0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x1f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x22,
	0xaf, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x39, 0x0a, 0x19, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x16, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x54, 0x0a, 0x1d, 0x6d,
	0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x72, 0x6b,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x19, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x22, 0xeb, 0x05, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x49, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x44,
	0x0a, 0x1f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x6e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x12, 0x49, 0x0a, 0x21, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x5f,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12,
	0x5d, 0x0a, 0x23, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x1f, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x77,
	0x0a, 0x23, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x20, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x16, 0x6e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x13,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x56, 0x0a, 0x18, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x15, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x50,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x84, 0x02, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x6c,
	0x0a, 0x17, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x48, 0x0a, 0x1a,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc1, 0x01, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x37, 0x0a, 0x18, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x15, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x6f, 0x0a, 0x23, 0x73, 0x69, 0x64,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x69, 0x64, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x1e, 0x73, 0x69, 0x64, 0x65,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x20, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34,
	0x0a, 0x16, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x5f, 0x0a, 0x1a, 0x53, 0x69, 0x64, 0x65, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2a, 0x30, 0x0a, 0x12, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x42,
	0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4c, 0x4c, 0x4f,
	0x57, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_client_proto_rawDescOnce sync.Once
	file_client_proto_rawDescData = file_client_proto_rawDesc
)

func file_client_proto_rawDescGZIP() []byte {
	file_client_proto_rawDescOnce.Do(func() {
		file_client_proto_rawDescData = protoimpl.X.CompressGZIP(file_client_proto_rawDescData)
	})
	return file_client_proto_rawDescData
}

var file_client_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_client_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_client_proto_goTypes = []interface{}{
	(ThresholdCheckType)(0),                  // 0: client.ThresholdCheckType
	(*Address)(nil),                          // 1: client.Address
	(*Hash)(nil),                             // 2: client.Hash
	(*MerklePath)(nil),                       // 3: client.MerklePath
	(*MerklePathNode)(nil),                   // 4: client.MerklePathNode
	(*BinaryMerkleTree)(nil),                 // 5: client.BinaryMerkleTree
	(*ScopedStatePath)(nil),                  // 6: client.ScopedStatePath
	(*StatePath)(nil),                        // 7: client.StatePath
	(*SmartContractRegistration)(nil),        // 8: client.SmartContractRegistration
	(*ContractInfo)(nil),                     // 9: client.ContractInfo
	(*MethodFees)(nil),                       // 10: client.MethodFees
	(*MethodFee)(nil),                        // 11: client.MethodFee
	(*ResourceInfo)(nil),                     // 12: client.ResourceInfo
	(*ProposalOutput)(nil),                   // 13: client.ProposalOutput
	(*ProposalReleaseThreshold)(nil),         // 14: client.ProposalReleaseThreshold
	(*ProposerWhiteList)(nil),                // 15: client.ProposerWhiteList
	(*ValidationResult)(nil),                 // 16: client.ValidationResult
	(*MethodCallingThreshold)(nil),           // 17: client.MethodCallingThreshold
	(*SideChainIndexingInformationList)(nil), // 18: client.SideChainIndexingInformationList
	(*SideChainIndexingInformation)(nil),     // 19: client.SideChainIndexingInformation
	(*CrossChainBlockData)(nil),              // 20: client.CrossChainBlockData
	(*SideChainBlockData)(nil),               // 21: client.SideChainBlockData
	(*ParentChainBlockData)(nil),             // 22: client.ParentChainBlockData
	(*CrossChainExtraData)(nil),              // 23: client.CrossChainExtraData
	(*CrossChainMerkleProofContext)(nil),     // 24: client.CrossChainMerkleProofContext
	(*ChainInitializationData)(nil),          // 25: client.ChainInitializationData
	(*ResourceTokenInfo)(nil),                // 26: client.ResourceTokenInfo
	(*ChainPrimaryTokenInfo)(nil),            // 27: client.ChainPrimaryTokenInfo
	(*ChainInitializationConsensusInfo)(nil), // 28: client.ChainInitializationConsensusInfo
	(*SideChainTokenInitialIssue)(nil),       // 29: client.SideChainTokenInitialIssue
	nil,                                      // 30: client.MethodCallingThreshold.SymbolToAmountEntry
	nil,                                      // 31: client.ParentChainBlockData.IndexedMerklePathEntry
	nil,                                      // 32: client.ParentChainBlockData.ExtraDataEntry
	nil,                                      // 33: client.ResourceTokenInfo.InitialResourceAmountEntry
	(*timestamp.Timestamp)(nil),              // 34: google.protobuf.Timestamp
}
var file_client_proto_depIdxs = []int32{
	4,  // 0: client.MerklePath.merkle_path_nodes:type_name -> client.MerklePathNode
	2,  // 1: client.MerklePathNode.hash:type_name -> client.Hash
	2,  // 2: client.BinaryMerkleTree.nodes:type_name -> client.Hash
	2,  // 3: client.BinaryMerkleTree.root:type_name -> client.Hash
	1,  // 4: client.ScopedStatePath.address:type_name -> client.Address
	7,  // 5: client.ScopedStatePath.path:type_name -> client.StatePath
	2,  // 6: client.SmartContractRegistration.code_hash:type_name -> client.Hash
	1,  // 7: client.ContractInfo.author:type_name -> client.Address
	2,  // 8: client.ContractInfo.code_hash:type_name -> client.Hash
	11, // 9: client.MethodFees.fees:type_name -> client.MethodFee
	11, // 10: client.MethodFee.fees:type_name -> client.MethodFee
	6,  // 11: client.ResourceInfo.write_paths:type_name -> client.ScopedStatePath
	6,  // 12: client.ResourceInfo.read_paths:type_name -> client.ScopedStatePath
	2,  // 13: client.ProposalOutput.proposal_id:type_name -> client.Hash
	1,  // 14: client.ProposalOutput.to_address:type_name -> client.Address
	34, // 15: client.ProposalOutput.expired_time:type_name -> google.protobuf.Timestamp
	1,  // 16: client.ProposalOutput.organization_address:type_name -> client.Address
	1,  // 17: client.ProposalOutput.proposer:type_name -> client.Address
	1,  // 18: client.ProposerWhiteList.proposers:type_name -> client.Address
	30, // 19: client.MethodCallingThreshold.symbol_to_amount:type_name -> client.MethodCallingThreshold.SymbolToAmountEntry
	0,  // 20: client.MethodCallingThreshold.threshold_check_type:type_name -> client.ThresholdCheckType
	19, // 21: client.SideChainIndexingInformationList.indexing_information_list:type_name -> client.SideChainIndexingInformation
	21, // 22: client.CrossChainBlockData.side_chain_block_data_list:type_name -> client.SideChainBlockData
	22, // 23: client.CrossChainBlockData.parent_chain_block_data_list:type_name -> client.ParentChainBlockData
	2,  // 24: client.SideChainBlockData.block_header_hash:type_name -> client.Hash
	2,  // 25: client.SideChainBlockData.transaction_status_merkle_tree_root:type_name -> client.Hash
	23, // 26: client.ParentChainBlockData.cross_chain_extra_data:type_name -> client.CrossChainExtraData
	2,  // 27: client.ParentChainBlockData.transaction_status_merkle_tree_root:type_name -> client.Hash
	31, // 28: client.ParentChainBlockData.indexed_merkle_path:type_name -> client.ParentChainBlockData.IndexedMerklePathEntry
	32, // 29: client.ParentChainBlockData.extra_data:type_name -> client.ParentChainBlockData.ExtraDataEntry
	2,  // 30: client.CrossChainExtraData.transaction_status_merkle_tree_root:type_name -> client.Hash
	3,  // 31: client.CrossChainMerkleProofContext.merkle_path_from_parent_chain:type_name -> client.MerklePath
	1,  // 32: client.ChainInitializationData.creator:type_name -> client.Address
	34, // 33: client.ChainInitializationData.creation_timestamp:type_name -> google.protobuf.Timestamp
	1,  // 34: client.ChainInitializationData.parent_chain_token_contract_address:type_name -> client.Address
	28, // 35: client.ChainInitializationData.chain_initialization_consensus_info:type_name -> client.ChainInitializationConsensusInfo
	26, // 36: client.ChainInitializationData.resource_token_info:type_name -> client.ResourceTokenInfo
	27, // 37: client.ChainInitializationData.chain_primary_token_info:type_name -> client.ChainPrimaryTokenInfo
	33, // 38: client.ResourceTokenInfo.initial_resource_amount:type_name -> client.ResourceTokenInfo.InitialResourceAmountEntry
	29, // 39: client.ChainPrimaryTokenInfo.side_chain_token_initial_issue_list:type_name -> client.SideChainTokenInitialIssue
	1,  // 40: client.SideChainTokenInitialIssue.address:type_name -> client.Address
	3,  // 41: client.ParentChainBlockData.IndexedMerklePathEntry.value:type_name -> client.MerklePath
	42, // [42:42] is the sub-list for method output_type
	42, // [42:42] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_client_proto_init() }
func file_client_proto_init() {
	if File_client_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_client_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerklePath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerklePathNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinaryMerkleTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScopedStatePath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatePath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmartContractRegistration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MethodFees); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MethodFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalReleaseThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposerWhiteList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MethodCallingThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SideChainIndexingInformationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SideChainIndexingInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossChainBlockData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SideChainBlockData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParentChainBlockData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossChainExtraData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossChainMerkleProofContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainInitializationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceTokenInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainPrimaryTokenInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainInitializationConsensusInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SideChainTokenInitialIssue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_client_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_client_proto_goTypes,
		DependencyIndexes: file_client_proto_depIdxs,
		EnumInfos:         file_client_proto_enumTypes,
		MessageInfos:      file_client_proto_msgTypes,
	}.Build()
	File_client_proto = out.File
	file_client_proto_rawDesc = nil
	file_client_proto_goTypes = nil
	file_client_proto_depIdxs = nil
}
