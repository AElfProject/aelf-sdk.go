syntax = "proto3";

import "client.proto";

package client;

//tokenContract
message TokenInfo {
    // The symbol of the token.f
    string symbol = 1;
    // The full name of the token.
    string token_name = 2;
    // The current supply of the token.
    int64 supply = 3;
    // The total supply of the token.
    int64 total_supply = 4;
    // The precision of the token.
    int32 decimals = 5;
    // The address that created the token.
    client.Address issuer = 6;
    // A flag indicating if this token is burnable.
    bool is_burnable = 7;
    // The chain id of the token.
    int32 issue_chain_id = 8;
    // The amount of issued tokens.
    int64 issued = 9;
}

message GetTokenInfoInput {
    // The symbol of token.
    string symbol = 1;
}

message TokenInfoList {
    // List of token information.
    repeated TokenInfo value = 1;
}

message GetBalanceInput {
    // The symbol of token.
    string symbol = 1;
    // The target address of the query.
    client.Address owner = 2;
}

message GetBalanceOutput {
    // The symbol of token.
    string symbol = 1;
    // The target address of the query.
    client.Address owner = 2;
    // The balance of the owner.
    int64 balance = 3;
}

message GetAllowanceInput {
    // The symbol of token.
    string symbol = 1;
    // The address of the token owner.
    client.Address owner = 2;
    // The address of the spender.
    client.Address spender = 3;
}

message GetAllowanceOutput {
    // The symbol of token.
    string symbol = 1;
    // The address of the token owner.
    client.Address owner = 2;
    // The address of the spender.
    client.Address spender = 3;
    // The amount of allowance.
    int64 allowance = 4;
}

message IsInWhiteListInput {
    // The symbol of token. 
    string symbol = 1;
    // The address to check.
    client.Address address = 2;
}

message GetLockedAmountInput {
    // The address of the lock.
    client.Address address = 1;
    // The token symbol.
    string symbol = 2;
    // The id of the lock.
    client.Hash lock_id = 3;
}

message GetLockedAmountOutput {
    // The address of the lock.
    client.Address address = 1;
    // The token symbol.
    string symbol = 2;
    // The id of the lock.
    client.Hash lock_id = 3;
    // The locked amount.
    int64 amount = 4;
}

message GetVirtualAddressForLockingInput {
    // The address of the lock. 
    client.Address address = 1;
    // The id of the lock. 
    client.Hash lock_id = 2;
}

message GetCrossChainTransferTokenContractAddressInput {
    // The chain id.
    int32 chainId = 1;
}

message TransferFromInput {
    // The source address of the token.
    client.Address from = 1;
    // The destination address of the token.
    client.Address to = 2;
    // The symbol of the token to transfer.
    string symbol = 3;
    // The amount to transfer.
    int64 amount = 4;
    // The memo.
    string memo = 5;
}

message TransferInput {
    // The receiver of the token.
    client.Address to = 1;
    // The token symbol to transfer.
    string symbol = 2;
    // The amount to to transfer.
    int64 amount = 3;
    // The memo.
    string memo = 4;
}
