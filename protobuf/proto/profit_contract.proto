syntax = "proto3";

import "client.proto";

package client;

//profit_contract
message CreatedSchemeIds {
    // The scheme ids.
    repeated client.Hash scheme_ids = 1;
}

message GetManagingSchemeIdsInput {
    // The manager address.
    client.Address manager = 1;
}

message SchemeBeneficiaryShare {
    // The id of the sub scheme.
    client.Hash scheme_id = 1;
    // The weight of the sub scheme. 
    int64 shares = 2;
}

message Scheme {
    // The virtual address of the scheme.
    client.Address virtual_address = 1;
    // The total weight of the scheme.
    int64 total_shares = 2;
    // The manager of the scheme.
    client.Address manager = 3;
    // The current period.
    int64 current_period = 4;
    // Sub schemes information.
    repeated SchemeBeneficiaryShare sub_schemes = 5;
    // Whether you can directly remove the beneficiary.
    bool can_remove_beneficiary_directly = 6;
    // Period of profit distribution.
    int64 profit_receiving_due_period_count = 7;
    // Whether all the schemes balance will be distributed during distribution each period.
    bool is_release_all_balance_every_time_by_default = 8;
    // The is of the scheme.
    client.Hash scheme_id = 9;
    // Delay distribute period.
    int32 delay_distribute_period_count = 10;
    // Record the scheme's current total share for deferred distribution of benefits, period -> total shares.
    map<int64, int64> cached_delay_total_shares = 11;
    // The received token symbols.
    repeated string received_token_symbols = 12;
}

message SchemePeriod {
    // The scheme id.
    client.Hash scheme_id = 1;
    // The period number.
    int64 period = 2;
}

message DistributedProfitsInfo {
    // The total amount of shares in this scheme at the current period.
    int64 total_shares = 1;
    // The contributed amount in this scheme at the current period.
    map<string, sint64> amounts_map = 2;
    // Whether released.
    bool is_released = 3;
}

message GetProfitDetailsInput {
    // The scheme id.
    client.Hash scheme_id = 1;
    // The address of beneficiary.
    client.Address beneficiary = 2;
}

message ProfitDetails {
    // The profit information.
    repeated ProfitDetail details = 1;
}

message ProfitDetail {
    // The start period number.
    int64 start_period = 1;
    // The end period number.
    int64 end_period = 2;
    // The weight of the proceeds on the current period of the scheme.
    int64 shares = 3;
    // The last period number that the beneficiary received the profit.
    int64 last_profit_period = 4;
    // Whether the weight  has been removed.
    bool is_weight_removed = 5;
}

message ClaimProfitsInput {
    // The scheme id.
    client.Hash scheme_id = 1;
    // The address of beneficiary.
    client.Address beneficiary = 2;
}